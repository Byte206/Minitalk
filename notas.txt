Conjuntos de señales -> objetos de datos que permiten a un proceso mantener el control sobre un grupo de señales.

*sigemptyset(sigset_t set) -> inicializa el conjunto de señales apuntado por set para vacío, con todas las señales excluidas del conjunto.

*sigaddset(sigset_t set, int signal) -> añade una señal al grupo de señales ya almacenadas en set
    - devuelve 0 si la señal fue añadida con éxito
    - devuelve -1 y pone errno a EINVAL si la señal no es soportada

**sigaction(int sig, const struct sigaction restrict new, struct sigaction restrict old) -> examina y cambia la acción asociada a una señal específica
    - sig -> número de la señal
    - *const struct sigaction new -> si es NULL, la función determina la acción actualmente definida para manejar la señal sig
    - *struct sigaction old -> apunta a un lugar en memoria donde la función puede almacenar una estructura sigaction

kill(pid_t pid, int sig) -> envía una señal a un proceso
    - pid_t pid -> especifica el proceso al que el emisor quiere enviar la señal
    - pid > 0 -> kill() envía la señal al proceso cuyo ID es igual a pid
    - pid == 0 -> kill() envía la señal a todos los procesos que tengan el mismo ID de grupo que el emisor, excepto si el emisor no tiene privilegios adecuados
    - pid == -1 -> kill() devuelve -1
    - sig -> la señal que debe enviarse al proceso especificado por pid
    - sig debe ser 0 o uno de los números de señales definidos en el archivo de cabecera signal.h

pause(void) -> suspende la ejecución del hilo actual hasta recibir una señal.

sleep(unsigned int seconds) -> suspende la ejecución del hilo por un número específico de segundos.

usleep(useconds_t useconds) -> suspende la ejecución del hilo por un número específico de microsegundos indicado por useconds.

exit(int status) -> finaliza el programa con el estado dado.

getpid() -> obtiene el ID del proceso que llama a la función.

SIGINFO -> usada cuando se establece un manejador de señal.

OBS.:
Un manejador para una señal puede definirse usando sigaction() o signal(), preferentemente la primera opción, ya que signal() no bloquea otras señales, y 
además restablece la acción de la señal a SIG_DFL (comportamiento por defecto) para casi todas las señales. Esto significa que un manejador definido con signal() debe reinstalarse a sí mismo 
como primera acción. También existe una ventana de vulnerabilidad entre el momento en que la señal es detectada y el manejador es reinstalado; si llega una segunda instancia de la señal en ese
 intervalo, se ejecuta el comportamiento por defecto (normalmente termina el programa, a veces con efectos negativos como core dumps).